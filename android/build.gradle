buildscript {
  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:7.2.1"
  }
}

def reactNativeArchitectures() {
  def value = rootProject.getProperties().get("reactNativeArchitectures")
  return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: 'org.jetbrains.kotlin.android'
apply from: '../nitrogen/generated/android/NitroTotp+autolinking.gradle'

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["NitroTotp_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["NitroTotp_" + name]).toInteger()
}

android {
  namespace "com.margelo.nitro.totp"

  ndkVersion getExtOrDefault("ndkVersion")
  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()

    externalNativeBuild {
      cmake {
        cppFlags "-O2 -frtti -fexceptions -Wall -fstack-protector-all"
        arguments "-DANDROID_STL=c++_shared"
        abiFilters (*reactNativeArchitectures())
      }
    }
  }

  externalNativeBuild {
    cmake {
      path "CMakeLists.txt"
    }
  }

  buildFeatures {
    buildConfig true
    prefab true
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  sourceSets {
    main {
      if (isNewArchitectureEnabled()) {
        java.srcDirs += [
          // React Codegen files
          "${project.buildDir}/generated/source/codegen/java"
        ]
      }
    }
  }

  // Add a custom task for compiling OpenSSL
  tasks.register("compileOpenSSL") {
    // Define required environment variables
    def androidPlatform = System.getenv("ANDROID_PLATFORM") ?: "android-21"
    def outputDir = file("../cpp").absolutePath
    def androidHome = System.getenv("ANDROID_HOME") ?: "${System.getenv("HOME")}/Android/Sdk"
    def androidNdkRoot = System.getenv("ANDROID_NDK_ROOT") ?: "${androidHome}/ndk-bundle"
    def androidAbi = System.getenv("ANDROID_ABI") ?: "armeabi-v7a" // Default to armeabi-v7a if not set
    def opensslLibDir = file("../cpp/android-${androidAbi}")
    def opensslLibs = ["libcrypto.a", "libssl.a"]

    // Check if the required OpenSSL libraries exist
    doLast {
      def missingLibs = opensslLibs.findAll { lib ->
        !file("${opensslLibDir}/lib/${lib}").exists()
      }

      if (!missingLibs.isEmpty()) {
        println "OpenSSL libraries not found, compiling..."

        def compileScript = new File("../scripts/build-openssl.sh")

        if (compileScript.exists()) {

          // Pass the required arguments to the script
          def result = exec {
            environment "ANDROID_PLATFORM", androidPlatform
            environment "OUTPUT_DIR", outputDir
            environment "ANDROID_HOME", androidHome
            environment "ANDROID_NDK_ROOT", androidNdkRoot
            commandLine 'bash', compileScript.absolutePath
          }

          if (result.exitValue != 0) {
            throw new GradleException("Failed to compile OpenSSL")
          }
        } else {
          throw new GradleException("Compile script not found: ${compileScript.absolutePath}")
        }
      } else {
        println "OpenSSL libraries found, skipping compilation."
      }
    }
  }

  // Ensure this task runs before the build process
  preBuild.dependsOn tasks.named("compileOpenSSL")
}

repositories {
  mavenCentral()
  google()
}


dependencies {
  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"

  // Add a dependency on NitroModules
  implementation project(":react-native-nitro-modules")
}

