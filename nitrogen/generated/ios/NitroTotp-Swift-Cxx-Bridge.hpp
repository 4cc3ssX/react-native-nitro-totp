///
/// NitroTotp-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `GenerateOptions` to properly resolve imports.
namespace margelo::nitro::totp { struct GenerateOptions; }
// Forward declaration of `GenerateSecretKeyOptions` to properly resolve imports.
namespace margelo::nitro::totp { struct GenerateSecretKeyOptions; }

// Include C++ defined types
#if __has_include("GenerateOptions.hpp")
 #include "GenerateOptions.hpp"
#endif
#if __has_include("GenerateSecretKeyOptions.hpp")
 #include "GenerateSecretKeyOptions.hpp"
#endif
#if __has_include(<optional>)
 #include <optional>
#endif

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::totp::bridge::swift {

  /**
   * Specialized version of `std::optional<double>`.
   */
  using std__optional_double_ = std::optional<double>;
  inline std::optional<double> create_std__optional_double_(const double& value) {
    return std::optional<double>(value);
  }
  
  /**
   * Specialized version of `std::optional<GenerateSecretKeyOptions>`.
   */
  using std__optional_GenerateSecretKeyOptions_ = std::optional<GenerateSecretKeyOptions>;
  inline std::optional<GenerateSecretKeyOptions> create_std__optional_GenerateSecretKeyOptions_(const GenerateSecretKeyOptions& value) {
    return std::optional<GenerateSecretKeyOptions>(value);
  }
  
  /**
   * Specialized version of `std::optional<GenerateOptions>`.
   */
  using std__optional_GenerateOptions_ = std::optional<GenerateOptions>;
  inline std::optional<GenerateOptions> create_std__optional_GenerateOptions_(const GenerateOptions& value) {
    return std::optional<GenerateOptions>(value);
  }

} // namespace margelo::nitro::totp::bridge::swift
